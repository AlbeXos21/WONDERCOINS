"use strict";var hoards={form:null,pagination:null,list:null,form_node:null,form_container:null,rows_container:null,table:null,set_up:function(options){const self=this;self.form_container=options.form_container,self.rows_container=options.rows_container,self.table=options.table,self.form=new form_factory;const form_node=self.render_form();function paginate(offset){self.pagination.offset=offset,self.form_submit()}return self.form_container.appendChild(form_node),self.pagination={total:null,limit:15,offset:0,n_nodes:8},event_manager.subscribe("paginate",paginate),self.form_submit(),!0},render_form:function(){const self=this,fragment=new DocumentFragment,form_row=common.create_dom_element({element_type:"div",class_name:"form-row fields",parent:fragment});self.form.item_factory({id:"global_search",name:"global_search",label:tstring.global_search||"global_search",q_column:"name",eq:"MATCH",eq_in:"",eq_out:"",class_name:"global_search",parent:form_row,callback:function(form_item){const node_input=form_item.node_input,button_info=common.create_dom_element({element_type:"div",class_name:"search_operators_info",parent:node_input.parentNode});let operators_info;button_info.addEventListener("click",(function(event){if(event.stopPropagation(),operators_info)return operators_info.remove(),void(operators_info=null);operators_info=self.form.full_text_search_operators_info(),node_input.parentNode.appendChild(operators_info)})),window.addEventListener("click",(function(e){operators_info&&!node_input.contains(e.target)&&(operators_info.remove(),operators_info=null)}))}}),self.form.item_factory({id:"name",name:"name",label:tstring.name||"Name",q_column:"name",eq:"LIKE",eq_in:"%",eq_out:"%",parent:form_row,callback:function(form_item){const table="findspots"===self.table?"findspots":"hoards";self.form.activate_autocomplete({form_item:form_item,table:table})}}),self.form.item_factory({id:"place",name:"place",label:tstring.place||"Place",q_column:"place",eq:"LIKE",eq_in:"%",eq_out:"%",parent:form_row,callback:function(form_item){const table="findspots"===self.table?"findspots":"hoards";self.form.activate_autocomplete({form_item:form_item,table:table})}});const submit_group=common.create_dom_element({element_type:"div",class_name:"form-group field button_submit",parent:fragment}),submit_button=common.create_dom_element({element_type:"input",type:"submit",id:"submit",value:tstring.search||"Search",class_name:"btn btn-light btn-block primary",parent:submit_group});submit_button.addEventListener("click",(function(e){e.preventDefault(),self.pagination={total:null,limit:15,offset:0,n_nodes:8},self.form_submit()}));const operators_node=self.form.build_operators_node();return fragment.appendChild(operators_node),self.form.node=common.create_dom_element({element_type:"form",id:"search_form",class_name:"form-inline form_factory"}),self.form.node.appendChild(fragment),self.form.node},form_submit:function(){const self=this,form_node=self.form.node;if(!form_node)return new Promise((function(resolve){console.error("Error on submit. Invalid form_node.",form_node),resolve(!1)}));const rows_container=self.rows_container;return self.pagination.total?rows_container.classList.add("loading"):page.add_spinner(rows_container),new Promise((function(resolve){const table="findspots"===self.table?"findspots":"hoards",ar_fields=["*"],limit=self.pagination.limit,offset=self.pagination.offset,count=!0,order="name",resolve_portals_custom={bibliography_data:"bibliographic_references"},filter=self.form.build_filter(),group=[],parsed_filter=self.form.parse_sql_filter(filter,group),sql_filter=parsed_filter?"("+parsed_filter+")":null;!0===SHOW_DEBUG&&console.log("-> coins form_submit sql_filter:",sql_filter),data_manager.request({body:{dedalo_get:"records",table:table,ar_fields:ar_fields,sql_filter:sql_filter,limit:limit,count:!0,offset:offset,order:order,process_result:null,resolve_portals_custom:resolve_portals_custom}}).then((function(api_response){console.log("--------------- api_response:",api_response),console.log(page_globals.JSON_TRIGGER_URL);const data=page.parse_hoard_data(api_response.result),total=api_response.total;self.pagination.total=total,self.pagination.offset=offset,data||(rows_container.classList.remove("loading"),resolve(null)),function(){for(;rows_container.hasChildNodes();)rows_container.removeChild(rows_container.lastChild);rows_container.classList.remove("loading")}(),self.list=self.list||new list_factory,self.list.init({data:data,fn_row_builder:self.list_row_builder,pagination:self.pagination,caller:self}),self.list.render_list().then((function(list_node){list_node&&rows_container.appendChild(list_node),resolve(list_node)}))}));const div_result=document.querySelector(".rows_container");div_result&&div_result.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})}))},list_row_builder:function(data){const self=this;return render_hoards.draw_item(data)},map_data_geojson:function(data,popup_data){const markerIcon=function(){switch(popup_data.type){case"findspot":return page.maps_config.markers.findspot;case"hoard":return page.maps_config.markers.hoard;default:return page.maps_config.markers.mint}}(),ar_data=Array.isArray(data)?data:[data],map_points=[];for(let i=0;i<ar_data.length;i++){const geojson=[ar_data[i]],item={lat:null,lon:null,geojson:geojson,marker_icon:markerIcon,data:popup_data};map_points.push(item)}return map_points},map_data_point:function(data,name){const ar_data=Array.isArray(data)?data:[data],data_clean=[];for(let i=0;i<ar_data.length;i++){const item={lat:ar_data[i].lat,lon:ar_data[i].lon,marker_icon:page.maps_config.markers.hoard,data:{section_id:null,title:name,description:" "}};data_clean.push(item)}return data_clean}};